// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/liangtengfei/beer-admin/api"
	"github.com/liangtengfei/beer-admin/internal/biz"
	"github.com/liangtengfei/beer-admin/internal/conf"
	"github.com/liangtengfei/beer-admin/internal/data"
	"github.com/liangtengfei/beer-admin/internal/server"
	"github.com/liangtengfei/beer-admin/internal/service"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func initApp(confServer *conf.Server, registry *conf.Registry, confData *conf.Data, app *conf.App, sugaredLogger *zap.SugaredLogger) (*App, func(), error) {
	client := data.NewEntClient(confData, sugaredLogger)
	cmdable := data.NewRedisCmd(confData, sugaredLogger)
	dataData, cleanup, err := data.NewData(client, cmdable, sugaredLogger)
	if err != nil {
		return nil, nil, err
	}
	sysUserRepo := data.NewSysUserRepo(dataData, sugaredLogger)
	sysUserUseCase := biz.NewSysUserUseCase(confServer, sysUserRepo, cmdable, sugaredLogger)
	sysUserService := service.NewSysUserService(sysUserUseCase, sugaredLogger)
	sysUserAPI := &api.SysUserAPI{
		Conf:    confServer,
		UserSrv: sysUserService,
		Logger:  sugaredLogger,
	}
	httpServer := server.NewHTTPServer(confServer, sysUserAPI)
	mainApp := newApp(httpServer)
	return mainApp, func() {
		cleanup()
	}, nil
}
