// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/liangtengfei/beer-admin/internal/data/ent/syspost"
)

// SysPost is the model entity for the SysPost schema.
type SysPost struct {
	config `json:"-"`
	// ID of the ent.
	// 系统岗位
	ID uint64 `json:"id"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人员
	CreatedBy string `json:"created_by,omitempty"`
	// 更新人员
	UpdatedBy string `json:"updated_by,omitempty"`
	// 岗位名称
	PostName string `json:"post_name,omitempty"`
	// 状态: 0=ON 1=OFF
	Status syspost.Status `json:"status,omitempty"`
	// 备注
	Remark string `json:"remark,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SysPostQuery when eager-loading is set.
	Edges SysPostEdges `json:"edges"`
}

// SysPostEdges holds the relations/edges for other nodes in the graph.
type SysPostEdges struct {
	// PostsUser holds the value of the posts_user edge.
	PostsUser []*SysUser `json:"posts_user,omitempty"`
	// SysUserPost holds the value of the sys_user_post edge.
	SysUserPost []*SysUserPost `json:"sys_user_post,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PostsUserOrErr returns the PostsUser value or an error if the edge
// was not loaded in eager-loading.
func (e SysPostEdges) PostsUserOrErr() ([]*SysUser, error) {
	if e.loadedTypes[0] {
		return e.PostsUser, nil
	}
	return nil, &NotLoadedError{edge: "posts_user"}
}

// SysUserPostOrErr returns the SysUserPost value or an error if the edge
// was not loaded in eager-loading.
func (e SysPostEdges) SysUserPostOrErr() ([]*SysUserPost, error) {
	if e.loadedTypes[1] {
		return e.SysUserPost, nil
	}
	return nil, &NotLoadedError{edge: "sys_user_post"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysPost) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case syspost.FieldID:
			values[i] = new(sql.NullInt64)
		case syspost.FieldCreatedBy, syspost.FieldUpdatedBy, syspost.FieldPostName, syspost.FieldStatus, syspost.FieldRemark:
			values[i] = new(sql.NullString)
		case syspost.FieldCreatedAt, syspost.FieldUpdatedAt, syspost.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SysPost", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysPost fields.
func (sp *SysPost) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case syspost.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sp.ID = uint64(value.Int64)
		case syspost.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sp.CreatedAt = value.Time
			}
		case syspost.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sp.UpdatedAt = value.Time
			}
		case syspost.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sp.DeletedAt = new(time.Time)
				*sp.DeletedAt = value.Time
			}
		case syspost.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				sp.CreatedBy = value.String
			}
		case syspost.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				sp.UpdatedBy = value.String
			}
		case syspost.FieldPostName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field post_name", values[i])
			} else if value.Valid {
				sp.PostName = value.String
			}
		case syspost.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sp.Status = syspost.Status(value.String)
			}
		case syspost.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				sp.Remark = value.String
			}
		}
	}
	return nil
}

// QueryPostsUser queries the "posts_user" edge of the SysPost entity.
func (sp *SysPost) QueryPostsUser() *SysUserQuery {
	return NewSysPostClient(sp.config).QueryPostsUser(sp)
}

// QuerySysUserPost queries the "sys_user_post" edge of the SysPost entity.
func (sp *SysPost) QuerySysUserPost() *SysUserPostQuery {
	return NewSysPostClient(sp.config).QuerySysUserPost(sp)
}

// Update returns a builder for updating this SysPost.
// Note that you need to call SysPost.Unwrap() before calling this method if this SysPost
// was returned from a transaction, and the transaction was committed or rolled back.
func (sp *SysPost) Update() *SysPostUpdateOne {
	return NewSysPostClient(sp.config).UpdateOne(sp)
}

// Unwrap unwraps the SysPost entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sp *SysPost) Unwrap() *SysPost {
	_tx, ok := sp.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysPost is not a transactional entity")
	}
	sp.config.driver = _tx.drv
	return sp
}

// String implements the fmt.Stringer.
func (sp *SysPost) String() string {
	var builder strings.Builder
	builder.WriteString("SysPost(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := sp.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(sp.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(sp.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("post_name=")
	builder.WriteString(sp.PostName)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sp.Status))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(sp.Remark)
	builder.WriteByte(')')
	return builder.String()
}

// SysPosts is a parsable slice of SysPost.
type SysPosts []*SysPost
