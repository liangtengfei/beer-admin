// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/liangtengfei/beer-admin/internal/data/ent/syspost"
	"github.com/liangtengfei/beer-admin/internal/data/ent/sysuser"
	"github.com/liangtengfei/beer-admin/internal/data/ent/sysuserpost"
)

// SysUserPostCreate is the builder for creating a SysUserPost entity.
type SysUserPostCreate struct {
	config
	mutation *SysUserPostMutation
	hooks    []Hook
}

// SetSysUserID sets the "sys_user_id" field.
func (supc *SysUserPostCreate) SetSysUserID(u uint64) *SysUserPostCreate {
	supc.mutation.SetSysUserID(u)
	return supc
}

// SetSysPostID sets the "sys_post_id" field.
func (supc *SysUserPostCreate) SetSysPostID(u uint64) *SysUserPostCreate {
	supc.mutation.SetSysPostID(u)
	return supc
}

// SetCreatedAt sets the "created_at" field.
func (supc *SysUserPostCreate) SetCreatedAt(t time.Time) *SysUserPostCreate {
	supc.mutation.SetCreatedAt(t)
	return supc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (supc *SysUserPostCreate) SetNillableCreatedAt(t *time.Time) *SysUserPostCreate {
	if t != nil {
		supc.SetCreatedAt(*t)
	}
	return supc
}

// SetUserID sets the "user" edge to the SysUser entity by ID.
func (supc *SysUserPostCreate) SetUserID(id uint64) *SysUserPostCreate {
	supc.mutation.SetUserID(id)
	return supc
}

// SetUser sets the "user" edge to the SysUser entity.
func (supc *SysUserPostCreate) SetUser(s *SysUser) *SysUserPostCreate {
	return supc.SetUserID(s.ID)
}

// SetPostID sets the "post" edge to the SysPost entity by ID.
func (supc *SysUserPostCreate) SetPostID(id uint64) *SysUserPostCreate {
	supc.mutation.SetPostID(id)
	return supc
}

// SetPost sets the "post" edge to the SysPost entity.
func (supc *SysUserPostCreate) SetPost(s *SysPost) *SysUserPostCreate {
	return supc.SetPostID(s.ID)
}

// Mutation returns the SysUserPostMutation object of the builder.
func (supc *SysUserPostCreate) Mutation() *SysUserPostMutation {
	return supc.mutation
}

// Save creates the SysUserPost in the database.
func (supc *SysUserPostCreate) Save(ctx context.Context) (*SysUserPost, error) {
	supc.defaults()
	return withHooks[*SysUserPost, SysUserPostMutation](ctx, supc.sqlSave, supc.mutation, supc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (supc *SysUserPostCreate) SaveX(ctx context.Context) *SysUserPost {
	v, err := supc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (supc *SysUserPostCreate) Exec(ctx context.Context) error {
	_, err := supc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (supc *SysUserPostCreate) ExecX(ctx context.Context) {
	if err := supc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (supc *SysUserPostCreate) defaults() {
	if _, ok := supc.mutation.CreatedAt(); !ok {
		v := sysuserpost.DefaultCreatedAt
		supc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (supc *SysUserPostCreate) check() error {
	if _, ok := supc.mutation.SysUserID(); !ok {
		return &ValidationError{Name: "sys_user_id", err: errors.New(`ent: missing required field "SysUserPost.sys_user_id"`)}
	}
	if _, ok := supc.mutation.SysPostID(); !ok {
		return &ValidationError{Name: "sys_post_id", err: errors.New(`ent: missing required field "SysUserPost.sys_post_id"`)}
	}
	if _, ok := supc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SysUserPost.created_at"`)}
	}
	if _, ok := supc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "SysUserPost.user"`)}
	}
	if _, ok := supc.mutation.PostID(); !ok {
		return &ValidationError{Name: "post", err: errors.New(`ent: missing required edge "SysUserPost.post"`)}
	}
	return nil
}

func (supc *SysUserPostCreate) sqlSave(ctx context.Context) (*SysUserPost, error) {
	if err := supc.check(); err != nil {
		return nil, err
	}
	_node, _spec := supc.createSpec()
	if err := sqlgraph.CreateNode(ctx, supc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (supc *SysUserPostCreate) createSpec() (*SysUserPost, *sqlgraph.CreateSpec) {
	var (
		_node = &SysUserPost{config: supc.config}
		_spec = sqlgraph.NewCreateSpec(sysuserpost.Table, nil)
	)
	if value, ok := supc.mutation.CreatedAt(); ok {
		_spec.SetField(sysuserpost.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := supc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sysuserpost.UserTable,
			Columns: []string{sysuserpost.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SysUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := supc.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sysuserpost.PostTable,
			Columns: []string{sysuserpost.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(syspost.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SysPostID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SysUserPostCreateBulk is the builder for creating many SysUserPost entities in bulk.
type SysUserPostCreateBulk struct {
	config
	builders []*SysUserPostCreate
}

// Save creates the SysUserPost entities in the database.
func (supcb *SysUserPostCreateBulk) Save(ctx context.Context) ([]*SysUserPost, error) {
	specs := make([]*sqlgraph.CreateSpec, len(supcb.builders))
	nodes := make([]*SysUserPost, len(supcb.builders))
	mutators := make([]Mutator, len(supcb.builders))
	for i := range supcb.builders {
		func(i int, root context.Context) {
			builder := supcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysUserPostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, supcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, supcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, supcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (supcb *SysUserPostCreateBulk) SaveX(ctx context.Context) []*SysUserPost {
	v, err := supcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (supcb *SysUserPostCreateBulk) Exec(ctx context.Context) error {
	_, err := supcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (supcb *SysUserPostCreateBulk) ExecX(ctx context.Context) {
	if err := supcb.Exec(ctx); err != nil {
		panic(err)
	}
}
