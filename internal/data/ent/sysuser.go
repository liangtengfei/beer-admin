// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/liangtengfei/beer-admin/internal/data/ent/sysuser"
)

// SysUser is the model entity for the SysUser schema.
type SysUser struct {
	config `json:"-"`
	// ID of the ent.
	// 系统用户
	ID uint64 `json:"id"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人员
	CreatedBy string `json:"created_by,omitempty"`
	// 更新人员
	UpdatedBy string `json:"updated_by,omitempty"`
	// 部门编号
	DeptID uint64 `json:"dept_id,omitempty"`
	// 登陆用户名称
	UserName string `json:"user_name,omitempty"`
	// 真实姓名
	RealName string `json:"real_name,omitempty"`
	// 手机号码
	Mobile string `json:"mobile,omitempty"`
	// 邮箱地址
	Email string `json:"email,omitempty"`
	// 头像地址
	Avatar string `json:"avatar,omitempty"`
	// 性别:male男性，female女性
	Sex sysuser.Sex `json:"sex,omitempty"`
	// 状态: 0=ON 1=OFF
	Status sysuser.Status `json:"status,omitempty"`
	// 登陆密码
	Password string `json:"-"`
	// 备注
	Remark string `json:"remark,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SysUserQuery when eager-loading is set.
	Edges SysUserEdges `json:"edges"`
}

// SysUserEdges holds the relations/edges for other nodes in the graph.
type SysUserEdges struct {
	// UsersPost holds the value of the users_post edge.
	UsersPost []*SysPost `json:"users_post,omitempty"`
	// SysUserPost holds the value of the sys_user_post edge.
	SysUserPost []*SysUserPost `json:"sys_user_post,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UsersPostOrErr returns the UsersPost value or an error if the edge
// was not loaded in eager-loading.
func (e SysUserEdges) UsersPostOrErr() ([]*SysPost, error) {
	if e.loadedTypes[0] {
		return e.UsersPost, nil
	}
	return nil, &NotLoadedError{edge: "users_post"}
}

// SysUserPostOrErr returns the SysUserPost value or an error if the edge
// was not loaded in eager-loading.
func (e SysUserEdges) SysUserPostOrErr() ([]*SysUserPost, error) {
	if e.loadedTypes[1] {
		return e.SysUserPost, nil
	}
	return nil, &NotLoadedError{edge: "sys_user_post"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysuser.FieldID, sysuser.FieldDeptID:
			values[i] = new(sql.NullInt64)
		case sysuser.FieldCreatedBy, sysuser.FieldUpdatedBy, sysuser.FieldUserName, sysuser.FieldRealName, sysuser.FieldMobile, sysuser.FieldEmail, sysuser.FieldAvatar, sysuser.FieldSex, sysuser.FieldStatus, sysuser.FieldPassword, sysuser.FieldRemark:
			values[i] = new(sql.NullString)
		case sysuser.FieldCreatedAt, sysuser.FieldUpdatedAt, sysuser.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SysUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysUser fields.
func (su *SysUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			su.ID = uint64(value.Int64)
		case sysuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				su.CreatedAt = value.Time
			}
		case sysuser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				su.UpdatedAt = value.Time
			}
		case sysuser.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				su.DeletedAt = new(time.Time)
				*su.DeletedAt = value.Time
			}
		case sysuser.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				su.CreatedBy = value.String
			}
		case sysuser.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				su.UpdatedBy = value.String
			}
		case sysuser.FieldDeptID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dept_id", values[i])
			} else if value.Valid {
				su.DeptID = uint64(value.Int64)
			}
		case sysuser.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_name", values[i])
			} else if value.Valid {
				su.UserName = value.String
			}
		case sysuser.FieldRealName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field real_name", values[i])
			} else if value.Valid {
				su.RealName = value.String
			}
		case sysuser.FieldMobile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mobile", values[i])
			} else if value.Valid {
				su.Mobile = value.String
			}
		case sysuser.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				su.Email = value.String
			}
		case sysuser.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				su.Avatar = value.String
			}
		case sysuser.FieldSex:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sex", values[i])
			} else if value.Valid {
				su.Sex = sysuser.Sex(value.String)
			}
		case sysuser.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				su.Status = sysuser.Status(value.String)
			}
		case sysuser.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				su.Password = value.String
			}
		case sysuser.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				su.Remark = value.String
			}
		}
	}
	return nil
}

// QueryUsersPost queries the "users_post" edge of the SysUser entity.
func (su *SysUser) QueryUsersPost() *SysPostQuery {
	return NewSysUserClient(su.config).QueryUsersPost(su)
}

// QuerySysUserPost queries the "sys_user_post" edge of the SysUser entity.
func (su *SysUser) QuerySysUserPost() *SysUserPostQuery {
	return NewSysUserClient(su.config).QuerySysUserPost(su)
}

// Update returns a builder for updating this SysUser.
// Note that you need to call SysUser.Unwrap() before calling this method if this SysUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (su *SysUser) Update() *SysUserUpdateOne {
	return NewSysUserClient(su.config).UpdateOne(su)
}

// Unwrap unwraps the SysUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (su *SysUser) Unwrap() *SysUser {
	_tx, ok := su.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysUser is not a transactional entity")
	}
	su.config.driver = _tx.drv
	return su
}

// String implements the fmt.Stringer.
func (su *SysUser) String() string {
	var builder strings.Builder
	builder.WriteString("SysUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", su.ID))
	builder.WriteString("created_at=")
	builder.WriteString(su.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(su.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := su.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(su.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(su.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("dept_id=")
	builder.WriteString(fmt.Sprintf("%v", su.DeptID))
	builder.WriteString(", ")
	builder.WriteString("user_name=")
	builder.WriteString(su.UserName)
	builder.WriteString(", ")
	builder.WriteString("real_name=")
	builder.WriteString(su.RealName)
	builder.WriteString(", ")
	builder.WriteString("mobile=")
	builder.WriteString(su.Mobile)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(su.Email)
	builder.WriteString(", ")
	builder.WriteString("avatar=")
	builder.WriteString(su.Avatar)
	builder.WriteString(", ")
	builder.WriteString("sex=")
	builder.WriteString(fmt.Sprintf("%v", su.Sex))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", su.Status))
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(su.Remark)
	builder.WriteByte(')')
	return builder.String()
}

// SysUsers is a parsable slice of SysUser.
type SysUsers []*SysUser
