// Code generated by ent, DO NOT EDIT.

package sysuser

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the sysuser type in the database.
	Label = "sys_user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeptID holds the string denoting the dept_id field in the database.
	FieldDeptID = "dept_id"
	// FieldUserName holds the string denoting the user_name field in the database.
	FieldUserName = "user_name"
	// FieldRealName holds the string denoting the real_name field in the database.
	FieldRealName = "real_name"
	// FieldMobile holds the string denoting the mobile field in the database.
	FieldMobile = "mobile"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// FieldSex holds the string denoting the sex field in the database.
	FieldSex = "sex"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// EdgeUsersPost holds the string denoting the users_post edge name in mutations.
	EdgeUsersPost = "users_post"
	// EdgeSysUserPost holds the string denoting the sys_user_post edge name in mutations.
	EdgeSysUserPost = "sys_user_post"
	// Table holds the table name of the sysuser in the database.
	Table = "sys_user"
	// UsersPostTable is the table that holds the users_post relation/edge. The primary key declared below.
	UsersPostTable = "sys_user_post"
	// UsersPostInverseTable is the table name for the SysPost entity.
	// It exists in this package in order to avoid circular dependency with the "syspost" package.
	UsersPostInverseTable = "sys_post"
	// SysUserPostTable is the table that holds the sys_user_post relation/edge.
	SysUserPostTable = "sys_user_post"
	// SysUserPostInverseTable is the table name for the SysUserPost entity.
	// It exists in this package in order to avoid circular dependency with the "sysuserpost" package.
	SysUserPostInverseTable = "sys_user_post"
	// SysUserPostColumn is the table column denoting the sys_user_post relation/edge.
	SysUserPostColumn = "sys_user_id"
)

// Columns holds all SQL columns for sysuser fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeptID,
	FieldUserName,
	FieldRealName,
	FieldMobile,
	FieldEmail,
	FieldAvatar,
	FieldSex,
	FieldStatus,
	FieldPassword,
	FieldRemark,
}

var (
	// UsersPostPrimaryKey and UsersPostColumn2 are the table columns denoting the
	// primary key for the users_post relation (M2M).
	UsersPostPrimaryKey = []string{"sys_user_id", "sys_post_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedBy holds the default value on creation for the "created_by" field.
	DefaultCreatedBy string
	// DefaultUpdatedBy holds the default value on creation for the "updated_by" field.
	DefaultUpdatedBy string
	// DefaultDeptID holds the default value on creation for the "dept_id" field.
	DefaultDeptID uint64
	// UserNameValidator is a validator for the "user_name" field. It is called by the builders before save.
	UserNameValidator func(string) error
	// RealNameValidator is a validator for the "real_name" field. It is called by the builders before save.
	RealNameValidator func(string) error
	// MobileValidator is a validator for the "mobile" field. It is called by the builders before save.
	MobileValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
)

// Sex defines the type for the "sex" enum field.
type Sex string

// SexMale is the default value of the Sex enum.
const DefaultSex = SexMale

// Sex values.
const (
	SexMale   Sex = "male"
	SexFemale Sex = "female"
)

func (s Sex) String() string {
	return string(s)
}

// SexValidator is a validator for the "sex" field enum values. It is called by the builders before save.
func SexValidator(s Sex) error {
	switch s {
	case SexMale, SexFemale:
		return nil
	default:
		return fmt.Errorf("sysuser: invalid enum value for sex field: %q", s)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// Status0 is the default value of the Status enum.
const DefaultStatus = Status0

// Status values.
const (
	Status0 Status = "0"
	Status1 Status = "1"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case Status0, Status1:
		return nil
	default:
		return fmt.Errorf("sysuser: invalid enum value for status field: %q", s)
	}
}
