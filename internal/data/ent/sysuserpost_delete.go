// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/liangtengfei/beer-admin/internal/data/ent/predicate"
	"github.com/liangtengfei/beer-admin/internal/data/ent/sysuserpost"
)

// SysUserPostDelete is the builder for deleting a SysUserPost entity.
type SysUserPostDelete struct {
	config
	hooks    []Hook
	mutation *SysUserPostMutation
}

// Where appends a list predicates to the SysUserPostDelete builder.
func (supd *SysUserPostDelete) Where(ps ...predicate.SysUserPost) *SysUserPostDelete {
	supd.mutation.Where(ps...)
	return supd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (supd *SysUserPostDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, SysUserPostMutation](ctx, supd.sqlExec, supd.mutation, supd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (supd *SysUserPostDelete) ExecX(ctx context.Context) int {
	n, err := supd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (supd *SysUserPostDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(sysuserpost.Table, nil)
	if ps := supd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, supd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	supd.mutation.done = true
	return affected, err
}

// SysUserPostDeleteOne is the builder for deleting a single SysUserPost entity.
type SysUserPostDeleteOne struct {
	supd *SysUserPostDelete
}

// Where appends a list predicates to the SysUserPostDelete builder.
func (supdo *SysUserPostDeleteOne) Where(ps ...predicate.SysUserPost) *SysUserPostDeleteOne {
	supdo.supd.mutation.Where(ps...)
	return supdo
}

// Exec executes the deletion query.
func (supdo *SysUserPostDeleteOne) Exec(ctx context.Context) error {
	n, err := supdo.supd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{sysuserpost.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (supdo *SysUserPostDeleteOne) ExecX(ctx context.Context) {
	if err := supdo.Exec(ctx); err != nil {
		panic(err)
	}
}
