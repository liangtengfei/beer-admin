// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/liangtengfei/beer-admin/internal/data/ent/predicate"
	"github.com/liangtengfei/beer-admin/internal/data/ent/syspost"
	"github.com/liangtengfei/beer-admin/internal/data/ent/sysuser"
	"github.com/liangtengfei/beer-admin/internal/data/ent/sysuserpost"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeSysPost     = "SysPost"
	TypeSysUser     = "SysUser"
	TypeSysUserPost = "SysUserPost"
)

// SysPostMutation represents an operation that mutates the SysPost nodes in the graph.
type SysPostMutation struct {
	config
	op                Op
	typ               string
	id                *uint64
	created_at        *time.Time
	updated_at        *time.Time
	deleted_at        *time.Time
	created_by        *string
	updated_by        *string
	post_name         *string
	status            *syspost.Status
	remark            *string
	clearedFields     map[string]struct{}
	posts_user        map[uint64]struct{}
	removedposts_user map[uint64]struct{}
	clearedposts_user bool
	done              bool
	oldValue          func(context.Context) (*SysPost, error)
	predicates        []predicate.SysPost
}

var _ ent.Mutation = (*SysPostMutation)(nil)

// syspostOption allows management of the mutation configuration using functional options.
type syspostOption func(*SysPostMutation)

// newSysPostMutation creates new mutation for the SysPost entity.
func newSysPostMutation(c config, op Op, opts ...syspostOption) *SysPostMutation {
	m := &SysPostMutation{
		config:        c,
		op:            op,
		typ:           TypeSysPost,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysPostID sets the ID field of the mutation.
func withSysPostID(id uint64) syspostOption {
	return func(m *SysPostMutation) {
		var (
			err   error
			once  sync.Once
			value *SysPost
		)
		m.oldValue = func(ctx context.Context) (*SysPost, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysPost.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysPost sets the old SysPost of the mutation.
func withSysPost(node *SysPost) syspostOption {
	return func(m *SysPostMutation) {
		m.oldValue = func(context.Context) (*SysPost, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysPostMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysPostMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysPost entities.
func (m *SysPostMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysPostMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysPostMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysPost.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SysPostMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysPostMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysPost entity.
// If the SysPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysPostMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysPostMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysPostMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysPostMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysPost entity.
// If the SysPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysPostMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysPostMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SysPostMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SysPostMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SysPost entity.
// If the SysPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysPostMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SysPostMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[syspost.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SysPostMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[syspost.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SysPostMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, syspost.FieldDeletedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *SysPostMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *SysPostMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the SysPost entity.
// If the SysPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysPostMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *SysPostMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[syspost.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *SysPostMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[syspost.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *SysPostMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, syspost.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *SysPostMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *SysPostMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the SysPost entity.
// If the SysPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysPostMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *SysPostMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[syspost.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *SysPostMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[syspost.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *SysPostMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, syspost.FieldUpdatedBy)
}

// SetPostName sets the "post_name" field.
func (m *SysPostMutation) SetPostName(s string) {
	m.post_name = &s
}

// PostName returns the value of the "post_name" field in the mutation.
func (m *SysPostMutation) PostName() (r string, exists bool) {
	v := m.post_name
	if v == nil {
		return
	}
	return *v, true
}

// OldPostName returns the old "post_name" field's value of the SysPost entity.
// If the SysPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysPostMutation) OldPostName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPostName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPostName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPostName: %w", err)
	}
	return oldValue.PostName, nil
}

// ResetPostName resets all changes to the "post_name" field.
func (m *SysPostMutation) ResetPostName() {
	m.post_name = nil
}

// SetStatus sets the "status" field.
func (m *SysPostMutation) SetStatus(s syspost.Status) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *SysPostMutation) Status() (r syspost.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the SysPost entity.
// If the SysPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysPostMutation) OldStatus(ctx context.Context) (v syspost.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *SysPostMutation) ResetStatus() {
	m.status = nil
}

// SetRemark sets the "remark" field.
func (m *SysPostMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *SysPostMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the SysPost entity.
// If the SysPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysPostMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *SysPostMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[syspost.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *SysPostMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[syspost.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *SysPostMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, syspost.FieldRemark)
}

// AddPostsUserIDs adds the "posts_user" edge to the SysUser entity by ids.
func (m *SysPostMutation) AddPostsUserIDs(ids ...uint64) {
	if m.posts_user == nil {
		m.posts_user = make(map[uint64]struct{})
	}
	for i := range ids {
		m.posts_user[ids[i]] = struct{}{}
	}
}

// ClearPostsUser clears the "posts_user" edge to the SysUser entity.
func (m *SysPostMutation) ClearPostsUser() {
	m.clearedposts_user = true
}

// PostsUserCleared reports if the "posts_user" edge to the SysUser entity was cleared.
func (m *SysPostMutation) PostsUserCleared() bool {
	return m.clearedposts_user
}

// RemovePostsUserIDs removes the "posts_user" edge to the SysUser entity by IDs.
func (m *SysPostMutation) RemovePostsUserIDs(ids ...uint64) {
	if m.removedposts_user == nil {
		m.removedposts_user = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.posts_user, ids[i])
		m.removedposts_user[ids[i]] = struct{}{}
	}
}

// RemovedPostsUser returns the removed IDs of the "posts_user" edge to the SysUser entity.
func (m *SysPostMutation) RemovedPostsUserIDs() (ids []uint64) {
	for id := range m.removedposts_user {
		ids = append(ids, id)
	}
	return
}

// PostsUserIDs returns the "posts_user" edge IDs in the mutation.
func (m *SysPostMutation) PostsUserIDs() (ids []uint64) {
	for id := range m.posts_user {
		ids = append(ids, id)
	}
	return
}

// ResetPostsUser resets all changes to the "posts_user" edge.
func (m *SysPostMutation) ResetPostsUser() {
	m.posts_user = nil
	m.clearedposts_user = false
	m.removedposts_user = nil
}

// Where appends a list predicates to the SysPostMutation builder.
func (m *SysPostMutation) Where(ps ...predicate.SysPost) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SysPostMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SysPostMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SysPost, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SysPostMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SysPostMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SysPost).
func (m *SysPostMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysPostMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, syspost.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, syspost.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, syspost.FieldDeletedAt)
	}
	if m.created_by != nil {
		fields = append(fields, syspost.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, syspost.FieldUpdatedBy)
	}
	if m.post_name != nil {
		fields = append(fields, syspost.FieldPostName)
	}
	if m.status != nil {
		fields = append(fields, syspost.FieldStatus)
	}
	if m.remark != nil {
		fields = append(fields, syspost.FieldRemark)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysPostMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case syspost.FieldCreatedAt:
		return m.CreatedAt()
	case syspost.FieldUpdatedAt:
		return m.UpdatedAt()
	case syspost.FieldDeletedAt:
		return m.DeletedAt()
	case syspost.FieldCreatedBy:
		return m.CreatedBy()
	case syspost.FieldUpdatedBy:
		return m.UpdatedBy()
	case syspost.FieldPostName:
		return m.PostName()
	case syspost.FieldStatus:
		return m.Status()
	case syspost.FieldRemark:
		return m.Remark()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysPostMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case syspost.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case syspost.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case syspost.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case syspost.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case syspost.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case syspost.FieldPostName:
		return m.OldPostName(ctx)
	case syspost.FieldStatus:
		return m.OldStatus(ctx)
	case syspost.FieldRemark:
		return m.OldRemark(ctx)
	}
	return nil, fmt.Errorf("unknown SysPost field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysPostMutation) SetField(name string, value ent.Value) error {
	switch name {
	case syspost.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case syspost.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case syspost.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case syspost.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case syspost.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case syspost.FieldPostName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostName(v)
		return nil
	case syspost.FieldStatus:
		v, ok := value.(syspost.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case syspost.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	}
	return fmt.Errorf("unknown SysPost field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysPostMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysPostMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysPostMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SysPost numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysPostMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(syspost.FieldDeletedAt) {
		fields = append(fields, syspost.FieldDeletedAt)
	}
	if m.FieldCleared(syspost.FieldCreatedBy) {
		fields = append(fields, syspost.FieldCreatedBy)
	}
	if m.FieldCleared(syspost.FieldUpdatedBy) {
		fields = append(fields, syspost.FieldUpdatedBy)
	}
	if m.FieldCleared(syspost.FieldRemark) {
		fields = append(fields, syspost.FieldRemark)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysPostMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysPostMutation) ClearField(name string) error {
	switch name {
	case syspost.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case syspost.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case syspost.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case syspost.FieldRemark:
		m.ClearRemark()
		return nil
	}
	return fmt.Errorf("unknown SysPost nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysPostMutation) ResetField(name string) error {
	switch name {
	case syspost.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case syspost.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case syspost.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case syspost.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case syspost.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case syspost.FieldPostName:
		m.ResetPostName()
		return nil
	case syspost.FieldStatus:
		m.ResetStatus()
		return nil
	case syspost.FieldRemark:
		m.ResetRemark()
		return nil
	}
	return fmt.Errorf("unknown SysPost field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysPostMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.posts_user != nil {
		edges = append(edges, syspost.EdgePostsUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysPostMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case syspost.EdgePostsUser:
		ids := make([]ent.Value, 0, len(m.posts_user))
		for id := range m.posts_user {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysPostMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedposts_user != nil {
		edges = append(edges, syspost.EdgePostsUser)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysPostMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case syspost.EdgePostsUser:
		ids := make([]ent.Value, 0, len(m.removedposts_user))
		for id := range m.removedposts_user {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysPostMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedposts_user {
		edges = append(edges, syspost.EdgePostsUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysPostMutation) EdgeCleared(name string) bool {
	switch name {
	case syspost.EdgePostsUser:
		return m.clearedposts_user
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysPostMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown SysPost unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysPostMutation) ResetEdge(name string) error {
	switch name {
	case syspost.EdgePostsUser:
		m.ResetPostsUser()
		return nil
	}
	return fmt.Errorf("unknown SysPost edge %s", name)
}

// SysUserMutation represents an operation that mutates the SysUser nodes in the graph.
type SysUserMutation struct {
	config
	op                Op
	typ               string
	id                *uint64
	created_at        *time.Time
	updated_at        *time.Time
	deleted_at        *time.Time
	created_by        *string
	updated_by        *string
	dept_id           *uint64
	adddept_id        *int64
	user_name         *string
	real_name         *string
	mobile            *string
	email             *string
	avatar            *string
	sex               *sysuser.Sex
	status            *sysuser.Status
	password          *string
	remark            *string
	clearedFields     map[string]struct{}
	users_post        map[uint64]struct{}
	removedusers_post map[uint64]struct{}
	clearedusers_post bool
	done              bool
	oldValue          func(context.Context) (*SysUser, error)
	predicates        []predicate.SysUser
}

var _ ent.Mutation = (*SysUserMutation)(nil)

// sysuserOption allows management of the mutation configuration using functional options.
type sysuserOption func(*SysUserMutation)

// newSysUserMutation creates new mutation for the SysUser entity.
func newSysUserMutation(c config, op Op, opts ...sysuserOption) *SysUserMutation {
	m := &SysUserMutation{
		config:        c,
		op:            op,
		typ:           TypeSysUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysUserID sets the ID field of the mutation.
func withSysUserID(id uint64) sysuserOption {
	return func(m *SysUserMutation) {
		var (
			err   error
			once  sync.Once
			value *SysUser
		)
		m.oldValue = func(ctx context.Context) (*SysUser, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysUser sets the old SysUser of the mutation.
func withSysUser(node *SysUser) sysuserOption {
	return func(m *SysUserMutation) {
		m.oldValue = func(context.Context) (*SysUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysUser entities.
func (m *SysUserMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysUserMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysUserMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysUser.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SysUserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysUserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysUserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysUserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysUserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysUserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SysUserMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SysUserMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SysUserMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[sysuser.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SysUserMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SysUserMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, sysuser.FieldDeletedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *SysUserMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *SysUserMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *SysUserMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[sysuser.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *SysUserMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *SysUserMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, sysuser.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *SysUserMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *SysUserMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *SysUserMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[sysuser.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *SysUserMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *SysUserMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, sysuser.FieldUpdatedBy)
}

// SetDeptID sets the "dept_id" field.
func (m *SysUserMutation) SetDeptID(u uint64) {
	m.dept_id = &u
	m.adddept_id = nil
}

// DeptID returns the value of the "dept_id" field in the mutation.
func (m *SysUserMutation) DeptID() (r uint64, exists bool) {
	v := m.dept_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDeptID returns the old "dept_id" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldDeptID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeptID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeptID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeptID: %w", err)
	}
	return oldValue.DeptID, nil
}

// AddDeptID adds u to the "dept_id" field.
func (m *SysUserMutation) AddDeptID(u int64) {
	if m.adddept_id != nil {
		*m.adddept_id += u
	} else {
		m.adddept_id = &u
	}
}

// AddedDeptID returns the value that was added to the "dept_id" field in this mutation.
func (m *SysUserMutation) AddedDeptID() (r int64, exists bool) {
	v := m.adddept_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeptID clears the value of the "dept_id" field.
func (m *SysUserMutation) ClearDeptID() {
	m.dept_id = nil
	m.adddept_id = nil
	m.clearedFields[sysuser.FieldDeptID] = struct{}{}
}

// DeptIDCleared returns if the "dept_id" field was cleared in this mutation.
func (m *SysUserMutation) DeptIDCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldDeptID]
	return ok
}

// ResetDeptID resets all changes to the "dept_id" field.
func (m *SysUserMutation) ResetDeptID() {
	m.dept_id = nil
	m.adddept_id = nil
	delete(m.clearedFields, sysuser.FieldDeptID)
}

// SetUserName sets the "user_name" field.
func (m *SysUserMutation) SetUserName(s string) {
	m.user_name = &s
}

// UserName returns the value of the "user_name" field in the mutation.
func (m *SysUserMutation) UserName() (r string, exists bool) {
	v := m.user_name
	if v == nil {
		return
	}
	return *v, true
}

// OldUserName returns the old "user_name" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldUserName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserName: %w", err)
	}
	return oldValue.UserName, nil
}

// ResetUserName resets all changes to the "user_name" field.
func (m *SysUserMutation) ResetUserName() {
	m.user_name = nil
}

// SetRealName sets the "real_name" field.
func (m *SysUserMutation) SetRealName(s string) {
	m.real_name = &s
}

// RealName returns the value of the "real_name" field in the mutation.
func (m *SysUserMutation) RealName() (r string, exists bool) {
	v := m.real_name
	if v == nil {
		return
	}
	return *v, true
}

// OldRealName returns the old "real_name" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldRealName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRealName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRealName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRealName: %w", err)
	}
	return oldValue.RealName, nil
}

// ResetRealName resets all changes to the "real_name" field.
func (m *SysUserMutation) ResetRealName() {
	m.real_name = nil
}

// SetMobile sets the "mobile" field.
func (m *SysUserMutation) SetMobile(s string) {
	m.mobile = &s
}

// Mobile returns the value of the "mobile" field in the mutation.
func (m *SysUserMutation) Mobile() (r string, exists bool) {
	v := m.mobile
	if v == nil {
		return
	}
	return *v, true
}

// OldMobile returns the old "mobile" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldMobile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMobile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMobile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMobile: %w", err)
	}
	return oldValue.Mobile, nil
}

// ResetMobile resets all changes to the "mobile" field.
func (m *SysUserMutation) ResetMobile() {
	m.mobile = nil
}

// SetEmail sets the "email" field.
func (m *SysUserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *SysUserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *SysUserMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[sysuser.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *SysUserMutation) EmailCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *SysUserMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, sysuser.FieldEmail)
}

// SetAvatar sets the "avatar" field.
func (m *SysUserMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *SysUserMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ClearAvatar clears the value of the "avatar" field.
func (m *SysUserMutation) ClearAvatar() {
	m.avatar = nil
	m.clearedFields[sysuser.FieldAvatar] = struct{}{}
}

// AvatarCleared returns if the "avatar" field was cleared in this mutation.
func (m *SysUserMutation) AvatarCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldAvatar]
	return ok
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *SysUserMutation) ResetAvatar() {
	m.avatar = nil
	delete(m.clearedFields, sysuser.FieldAvatar)
}

// SetSex sets the "sex" field.
func (m *SysUserMutation) SetSex(s sysuser.Sex) {
	m.sex = &s
}

// Sex returns the value of the "sex" field in the mutation.
func (m *SysUserMutation) Sex() (r sysuser.Sex, exists bool) {
	v := m.sex
	if v == nil {
		return
	}
	return *v, true
}

// OldSex returns the old "sex" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldSex(ctx context.Context) (v sysuser.Sex, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSex: %w", err)
	}
	return oldValue.Sex, nil
}

// ResetSex resets all changes to the "sex" field.
func (m *SysUserMutation) ResetSex() {
	m.sex = nil
}

// SetStatus sets the "status" field.
func (m *SysUserMutation) SetStatus(s sysuser.Status) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *SysUserMutation) Status() (r sysuser.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldStatus(ctx context.Context) (v sysuser.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *SysUserMutation) ResetStatus() {
	m.status = nil
}

// SetPassword sets the "password" field.
func (m *SysUserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *SysUserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *SysUserMutation) ResetPassword() {
	m.password = nil
}

// SetRemark sets the "remark" field.
func (m *SysUserMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *SysUserMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *SysUserMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[sysuser.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *SysUserMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *SysUserMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, sysuser.FieldRemark)
}

// AddUsersPostIDs adds the "users_post" edge to the SysPost entity by ids.
func (m *SysUserMutation) AddUsersPostIDs(ids ...uint64) {
	if m.users_post == nil {
		m.users_post = make(map[uint64]struct{})
	}
	for i := range ids {
		m.users_post[ids[i]] = struct{}{}
	}
}

// ClearUsersPost clears the "users_post" edge to the SysPost entity.
func (m *SysUserMutation) ClearUsersPost() {
	m.clearedusers_post = true
}

// UsersPostCleared reports if the "users_post" edge to the SysPost entity was cleared.
func (m *SysUserMutation) UsersPostCleared() bool {
	return m.clearedusers_post
}

// RemoveUsersPostIDs removes the "users_post" edge to the SysPost entity by IDs.
func (m *SysUserMutation) RemoveUsersPostIDs(ids ...uint64) {
	if m.removedusers_post == nil {
		m.removedusers_post = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.users_post, ids[i])
		m.removedusers_post[ids[i]] = struct{}{}
	}
}

// RemovedUsersPost returns the removed IDs of the "users_post" edge to the SysPost entity.
func (m *SysUserMutation) RemovedUsersPostIDs() (ids []uint64) {
	for id := range m.removedusers_post {
		ids = append(ids, id)
	}
	return
}

// UsersPostIDs returns the "users_post" edge IDs in the mutation.
func (m *SysUserMutation) UsersPostIDs() (ids []uint64) {
	for id := range m.users_post {
		ids = append(ids, id)
	}
	return
}

// ResetUsersPost resets all changes to the "users_post" edge.
func (m *SysUserMutation) ResetUsersPost() {
	m.users_post = nil
	m.clearedusers_post = false
	m.removedusers_post = nil
}

// Where appends a list predicates to the SysUserMutation builder.
func (m *SysUserMutation) Where(ps ...predicate.SysUser) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SysUserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SysUserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SysUser, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SysUserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SysUserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SysUser).
func (m *SysUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysUserMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.created_at != nil {
		fields = append(fields, sysuser.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sysuser.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, sysuser.FieldDeletedAt)
	}
	if m.created_by != nil {
		fields = append(fields, sysuser.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, sysuser.FieldUpdatedBy)
	}
	if m.dept_id != nil {
		fields = append(fields, sysuser.FieldDeptID)
	}
	if m.user_name != nil {
		fields = append(fields, sysuser.FieldUserName)
	}
	if m.real_name != nil {
		fields = append(fields, sysuser.FieldRealName)
	}
	if m.mobile != nil {
		fields = append(fields, sysuser.FieldMobile)
	}
	if m.email != nil {
		fields = append(fields, sysuser.FieldEmail)
	}
	if m.avatar != nil {
		fields = append(fields, sysuser.FieldAvatar)
	}
	if m.sex != nil {
		fields = append(fields, sysuser.FieldSex)
	}
	if m.status != nil {
		fields = append(fields, sysuser.FieldStatus)
	}
	if m.password != nil {
		fields = append(fields, sysuser.FieldPassword)
	}
	if m.remark != nil {
		fields = append(fields, sysuser.FieldRemark)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysuser.FieldCreatedAt:
		return m.CreatedAt()
	case sysuser.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysuser.FieldDeletedAt:
		return m.DeletedAt()
	case sysuser.FieldCreatedBy:
		return m.CreatedBy()
	case sysuser.FieldUpdatedBy:
		return m.UpdatedBy()
	case sysuser.FieldDeptID:
		return m.DeptID()
	case sysuser.FieldUserName:
		return m.UserName()
	case sysuser.FieldRealName:
		return m.RealName()
	case sysuser.FieldMobile:
		return m.Mobile()
	case sysuser.FieldEmail:
		return m.Email()
	case sysuser.FieldAvatar:
		return m.Avatar()
	case sysuser.FieldSex:
		return m.Sex()
	case sysuser.FieldStatus:
		return m.Status()
	case sysuser.FieldPassword:
		return m.Password()
	case sysuser.FieldRemark:
		return m.Remark()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysuser.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysuser.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysuser.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case sysuser.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case sysuser.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case sysuser.FieldDeptID:
		return m.OldDeptID(ctx)
	case sysuser.FieldUserName:
		return m.OldUserName(ctx)
	case sysuser.FieldRealName:
		return m.OldRealName(ctx)
	case sysuser.FieldMobile:
		return m.OldMobile(ctx)
	case sysuser.FieldEmail:
		return m.OldEmail(ctx)
	case sysuser.FieldAvatar:
		return m.OldAvatar(ctx)
	case sysuser.FieldSex:
		return m.OldSex(ctx)
	case sysuser.FieldStatus:
		return m.OldStatus(ctx)
	case sysuser.FieldPassword:
		return m.OldPassword(ctx)
	case sysuser.FieldRemark:
		return m.OldRemark(ctx)
	}
	return nil, fmt.Errorf("unknown SysUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysuser.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysuser.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysuser.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case sysuser.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case sysuser.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case sysuser.FieldDeptID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeptID(v)
		return nil
	case sysuser.FieldUserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserName(v)
		return nil
	case sysuser.FieldRealName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRealName(v)
		return nil
	case sysuser.FieldMobile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMobile(v)
		return nil
	case sysuser.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case sysuser.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case sysuser.FieldSex:
		v, ok := value.(sysuser.Sex)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSex(v)
		return nil
	case sysuser.FieldStatus:
		v, ok := value.(sysuser.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case sysuser.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case sysuser.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	}
	return fmt.Errorf("unknown SysUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysUserMutation) AddedFields() []string {
	var fields []string
	if m.adddept_id != nil {
		fields = append(fields, sysuser.FieldDeptID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysUserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysuser.FieldDeptID:
		return m.AddedDeptID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysuser.FieldDeptID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeptID(v)
		return nil
	}
	return fmt.Errorf("unknown SysUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysUserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysuser.FieldDeletedAt) {
		fields = append(fields, sysuser.FieldDeletedAt)
	}
	if m.FieldCleared(sysuser.FieldCreatedBy) {
		fields = append(fields, sysuser.FieldCreatedBy)
	}
	if m.FieldCleared(sysuser.FieldUpdatedBy) {
		fields = append(fields, sysuser.FieldUpdatedBy)
	}
	if m.FieldCleared(sysuser.FieldDeptID) {
		fields = append(fields, sysuser.FieldDeptID)
	}
	if m.FieldCleared(sysuser.FieldEmail) {
		fields = append(fields, sysuser.FieldEmail)
	}
	if m.FieldCleared(sysuser.FieldAvatar) {
		fields = append(fields, sysuser.FieldAvatar)
	}
	if m.FieldCleared(sysuser.FieldRemark) {
		fields = append(fields, sysuser.FieldRemark)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysUserMutation) ClearField(name string) error {
	switch name {
	case sysuser.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case sysuser.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case sysuser.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case sysuser.FieldDeptID:
		m.ClearDeptID()
		return nil
	case sysuser.FieldEmail:
		m.ClearEmail()
		return nil
	case sysuser.FieldAvatar:
		m.ClearAvatar()
		return nil
	case sysuser.FieldRemark:
		m.ClearRemark()
		return nil
	}
	return fmt.Errorf("unknown SysUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysUserMutation) ResetField(name string) error {
	switch name {
	case sysuser.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysuser.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysuser.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case sysuser.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case sysuser.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case sysuser.FieldDeptID:
		m.ResetDeptID()
		return nil
	case sysuser.FieldUserName:
		m.ResetUserName()
		return nil
	case sysuser.FieldRealName:
		m.ResetRealName()
		return nil
	case sysuser.FieldMobile:
		m.ResetMobile()
		return nil
	case sysuser.FieldEmail:
		m.ResetEmail()
		return nil
	case sysuser.FieldAvatar:
		m.ResetAvatar()
		return nil
	case sysuser.FieldSex:
		m.ResetSex()
		return nil
	case sysuser.FieldStatus:
		m.ResetStatus()
		return nil
	case sysuser.FieldPassword:
		m.ResetPassword()
		return nil
	case sysuser.FieldRemark:
		m.ResetRemark()
		return nil
	}
	return fmt.Errorf("unknown SysUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.users_post != nil {
		edges = append(edges, sysuser.EdgeUsersPost)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysUserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sysuser.EdgeUsersPost:
		ids := make([]ent.Value, 0, len(m.users_post))
		for id := range m.users_post {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedusers_post != nil {
		edges = append(edges, sysuser.EdgeUsersPost)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysUserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case sysuser.EdgeUsersPost:
		ids := make([]ent.Value, 0, len(m.removedusers_post))
		for id := range m.removedusers_post {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedusers_post {
		edges = append(edges, sysuser.EdgeUsersPost)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysUserMutation) EdgeCleared(name string) bool {
	switch name {
	case sysuser.EdgeUsersPost:
		return m.clearedusers_post
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysUserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown SysUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysUserMutation) ResetEdge(name string) error {
	switch name {
	case sysuser.EdgeUsersPost:
		m.ResetUsersPost()
		return nil
	}
	return fmt.Errorf("unknown SysUser edge %s", name)
}

// SysUserPostMutation represents an operation that mutates the SysUserPost nodes in the graph.
type SysUserPostMutation struct {
	config
	op            Op
	typ           string
	created_at    *time.Time
	clearedFields map[string]struct{}
	user          *uint64
	cleareduser   bool
	post          *uint64
	clearedpost   bool
	done          bool
	oldValue      func(context.Context) (*SysUserPost, error)
	predicates    []predicate.SysUserPost
}

var _ ent.Mutation = (*SysUserPostMutation)(nil)

// sysuserpostOption allows management of the mutation configuration using functional options.
type sysuserpostOption func(*SysUserPostMutation)

// newSysUserPostMutation creates new mutation for the SysUserPost entity.
func newSysUserPostMutation(c config, op Op, opts ...sysuserpostOption) *SysUserPostMutation {
	m := &SysUserPostMutation{
		config:        c,
		op:            op,
		typ:           TypeSysUserPost,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysUserPostMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysUserPostMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetSysUserID sets the "sys_user_id" field.
func (m *SysUserPostMutation) SetSysUserID(u uint64) {
	m.user = &u
}

// SysUserID returns the value of the "sys_user_id" field in the mutation.
func (m *SysUserPostMutation) SysUserID() (r uint64, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// ResetSysUserID resets all changes to the "sys_user_id" field.
func (m *SysUserPostMutation) ResetSysUserID() {
	m.user = nil
}

// SetSysPostID sets the "sys_post_id" field.
func (m *SysUserPostMutation) SetSysPostID(u uint64) {
	m.post = &u
}

// SysPostID returns the value of the "sys_post_id" field in the mutation.
func (m *SysUserPostMutation) SysPostID() (r uint64, exists bool) {
	v := m.post
	if v == nil {
		return
	}
	return *v, true
}

// ResetSysPostID resets all changes to the "sys_post_id" field.
func (m *SysUserPostMutation) ResetSysPostID() {
	m.post = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SysUserPostMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysUserPostMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysUserPostMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUserID sets the "user" edge to the SysUser entity by id.
func (m *SysUserPostMutation) SetUserID(id uint64) {
	m.user = &id
}

// ClearUser clears the "user" edge to the SysUser entity.
func (m *SysUserPostMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the SysUser entity was cleared.
func (m *SysUserPostMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *SysUserPostMutation) UserID() (id uint64, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *SysUserPostMutation) UserIDs() (ids []uint64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *SysUserPostMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetPostID sets the "post" edge to the SysPost entity by id.
func (m *SysUserPostMutation) SetPostID(id uint64) {
	m.post = &id
}

// ClearPost clears the "post" edge to the SysPost entity.
func (m *SysUserPostMutation) ClearPost() {
	m.clearedpost = true
}

// PostCleared reports if the "post" edge to the SysPost entity was cleared.
func (m *SysUserPostMutation) PostCleared() bool {
	return m.clearedpost
}

// PostID returns the "post" edge ID in the mutation.
func (m *SysUserPostMutation) PostID() (id uint64, exists bool) {
	if m.post != nil {
		return *m.post, true
	}
	return
}

// PostIDs returns the "post" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PostID instead. It exists only for internal usage by the builders.
func (m *SysUserPostMutation) PostIDs() (ids []uint64) {
	if id := m.post; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPost resets all changes to the "post" edge.
func (m *SysUserPostMutation) ResetPost() {
	m.post = nil
	m.clearedpost = false
}

// Where appends a list predicates to the SysUserPostMutation builder.
func (m *SysUserPostMutation) Where(ps ...predicate.SysUserPost) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SysUserPostMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SysUserPostMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SysUserPost, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SysUserPostMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SysUserPostMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SysUserPost).
func (m *SysUserPostMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysUserPostMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.user != nil {
		fields = append(fields, sysuserpost.FieldSysUserID)
	}
	if m.post != nil {
		fields = append(fields, sysuserpost.FieldSysPostID)
	}
	if m.created_at != nil {
		fields = append(fields, sysuserpost.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysUserPostMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysuserpost.FieldSysUserID:
		return m.SysUserID()
	case sysuserpost.FieldSysPostID:
		return m.SysPostID()
	case sysuserpost.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysUserPostMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, errors.New("edge schema SysUserPost does not support getting old values")
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysUserPostMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysuserpost.FieldSysUserID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSysUserID(v)
		return nil
	case sysuserpost.FieldSysPostID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSysPostID(v)
		return nil
	case sysuserpost.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown SysUserPost field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysUserPostMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysUserPostMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysUserPostMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SysUserPost numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysUserPostMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysUserPostMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysUserPostMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SysUserPost nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysUserPostMutation) ResetField(name string) error {
	switch name {
	case sysuserpost.FieldSysUserID:
		m.ResetSysUserID()
		return nil
	case sysuserpost.FieldSysPostID:
		m.ResetSysPostID()
		return nil
	case sysuserpost.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown SysUserPost field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysUserPostMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, sysuserpost.EdgeUser)
	}
	if m.post != nil {
		edges = append(edges, sysuserpost.EdgePost)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysUserPostMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sysuserpost.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case sysuserpost.EdgePost:
		if id := m.post; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysUserPostMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysUserPostMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysUserPostMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, sysuserpost.EdgeUser)
	}
	if m.clearedpost {
		edges = append(edges, sysuserpost.EdgePost)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysUserPostMutation) EdgeCleared(name string) bool {
	switch name {
	case sysuserpost.EdgeUser:
		return m.cleareduser
	case sysuserpost.EdgePost:
		return m.clearedpost
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysUserPostMutation) ClearEdge(name string) error {
	switch name {
	case sysuserpost.EdgeUser:
		m.ClearUser()
		return nil
	case sysuserpost.EdgePost:
		m.ClearPost()
		return nil
	}
	return fmt.Errorf("unknown SysUserPost unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysUserPostMutation) ResetEdge(name string) error {
	switch name {
	case sysuserpost.EdgeUser:
		m.ResetUser()
		return nil
	case sysuserpost.EdgePost:
		m.ResetPost()
		return nil
	}
	return fmt.Errorf("unknown SysUserPost edge %s", name)
}
