// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/liangtengfei/beer-admin/internal/data/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/liangtengfei/beer-admin/internal/data/ent/syspost"
	"github.com/liangtengfei/beer-admin/internal/data/ent/sysuser"
	"github.com/liangtengfei/beer-admin/internal/data/ent/sysuserpost"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// SysPost is the client for interacting with the SysPost builders.
	SysPost *SysPostClient
	// SysUser is the client for interacting with the SysUser builders.
	SysUser *SysUserClient
	// SysUserPost is the client for interacting with the SysUserPost builders.
	SysUserPost *SysUserPostClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.SysPost = NewSysPostClient(c.config)
	c.SysUser = NewSysUserClient(c.config)
	c.SysUserPost = NewSysUserPostClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		SysPost:     NewSysPostClient(cfg),
		SysUser:     NewSysUserClient(cfg),
		SysUserPost: NewSysUserPostClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		SysPost:     NewSysPostClient(cfg),
		SysUser:     NewSysUserClient(cfg),
		SysUserPost: NewSysUserPostClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		SysPost.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.SysPost.Use(hooks...)
	c.SysUser.Use(hooks...)
	c.SysUserPost.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.SysPost.Intercept(interceptors...)
	c.SysUser.Intercept(interceptors...)
	c.SysUserPost.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *SysPostMutation:
		return c.SysPost.mutate(ctx, m)
	case *SysUserMutation:
		return c.SysUser.mutate(ctx, m)
	case *SysUserPostMutation:
		return c.SysUserPost.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// SysPostClient is a client for the SysPost schema.
type SysPostClient struct {
	config
}

// NewSysPostClient returns a client for the SysPost from the given config.
func NewSysPostClient(c config) *SysPostClient {
	return &SysPostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `syspost.Hooks(f(g(h())))`.
func (c *SysPostClient) Use(hooks ...Hook) {
	c.hooks.SysPost = append(c.hooks.SysPost, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `syspost.Intercept(f(g(h())))`.
func (c *SysPostClient) Intercept(interceptors ...Interceptor) {
	c.inters.SysPost = append(c.inters.SysPost, interceptors...)
}

// Create returns a builder for creating a SysPost entity.
func (c *SysPostClient) Create() *SysPostCreate {
	mutation := newSysPostMutation(c.config, OpCreate)
	return &SysPostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysPost entities.
func (c *SysPostClient) CreateBulk(builders ...*SysPostCreate) *SysPostCreateBulk {
	return &SysPostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysPost.
func (c *SysPostClient) Update() *SysPostUpdate {
	mutation := newSysPostMutation(c.config, OpUpdate)
	return &SysPostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysPostClient) UpdateOne(sp *SysPost) *SysPostUpdateOne {
	mutation := newSysPostMutation(c.config, OpUpdateOne, withSysPost(sp))
	return &SysPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysPostClient) UpdateOneID(id uint64) *SysPostUpdateOne {
	mutation := newSysPostMutation(c.config, OpUpdateOne, withSysPostID(id))
	return &SysPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysPost.
func (c *SysPostClient) Delete() *SysPostDelete {
	mutation := newSysPostMutation(c.config, OpDelete)
	return &SysPostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysPostClient) DeleteOne(sp *SysPost) *SysPostDeleteOne {
	return c.DeleteOneID(sp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SysPostClient) DeleteOneID(id uint64) *SysPostDeleteOne {
	builder := c.Delete().Where(syspost.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysPostDeleteOne{builder}
}

// Query returns a query builder for SysPost.
func (c *SysPostClient) Query() *SysPostQuery {
	return &SysPostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSysPost},
		inters: c.Interceptors(),
	}
}

// Get returns a SysPost entity by its id.
func (c *SysPostClient) Get(ctx context.Context, id uint64) (*SysPost, error) {
	return c.Query().Where(syspost.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysPostClient) GetX(ctx context.Context, id uint64) *SysPost {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPostsUser queries the posts_user edge of a SysPost.
func (c *SysPostClient) QueryPostsUser(sp *SysPost) *SysUserQuery {
	query := (&SysUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(syspost.Table, syspost.FieldID, id),
			sqlgraph.To(sysuser.Table, sysuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, syspost.PostsUserTable, syspost.PostsUserPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySysUserPost queries the sys_user_post edge of a SysPost.
func (c *SysPostClient) QuerySysUserPost(sp *SysPost) *SysUserPostQuery {
	query := (&SysUserPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(syspost.Table, syspost.FieldID, id),
			sqlgraph.To(sysuserpost.Table, sysuserpost.PostColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, syspost.SysUserPostTable, syspost.SysUserPostColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SysPostClient) Hooks() []Hook {
	return c.hooks.SysPost
}

// Interceptors returns the client interceptors.
func (c *SysPostClient) Interceptors() []Interceptor {
	return c.inters.SysPost
}

func (c *SysPostClient) mutate(ctx context.Context, m *SysPostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SysPostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SysPostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SysPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SysPostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SysPost mutation op: %q", m.Op())
	}
}

// SysUserClient is a client for the SysUser schema.
type SysUserClient struct {
	config
}

// NewSysUserClient returns a client for the SysUser from the given config.
func NewSysUserClient(c config) *SysUserClient {
	return &SysUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysuser.Hooks(f(g(h())))`.
func (c *SysUserClient) Use(hooks ...Hook) {
	c.hooks.SysUser = append(c.hooks.SysUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sysuser.Intercept(f(g(h())))`.
func (c *SysUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.SysUser = append(c.inters.SysUser, interceptors...)
}

// Create returns a builder for creating a SysUser entity.
func (c *SysUserClient) Create() *SysUserCreate {
	mutation := newSysUserMutation(c.config, OpCreate)
	return &SysUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysUser entities.
func (c *SysUserClient) CreateBulk(builders ...*SysUserCreate) *SysUserCreateBulk {
	return &SysUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysUser.
func (c *SysUserClient) Update() *SysUserUpdate {
	mutation := newSysUserMutation(c.config, OpUpdate)
	return &SysUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysUserClient) UpdateOne(su *SysUser) *SysUserUpdateOne {
	mutation := newSysUserMutation(c.config, OpUpdateOne, withSysUser(su))
	return &SysUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysUserClient) UpdateOneID(id uint64) *SysUserUpdateOne {
	mutation := newSysUserMutation(c.config, OpUpdateOne, withSysUserID(id))
	return &SysUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysUser.
func (c *SysUserClient) Delete() *SysUserDelete {
	mutation := newSysUserMutation(c.config, OpDelete)
	return &SysUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysUserClient) DeleteOne(su *SysUser) *SysUserDeleteOne {
	return c.DeleteOneID(su.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SysUserClient) DeleteOneID(id uint64) *SysUserDeleteOne {
	builder := c.Delete().Where(sysuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysUserDeleteOne{builder}
}

// Query returns a query builder for SysUser.
func (c *SysUserClient) Query() *SysUserQuery {
	return &SysUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSysUser},
		inters: c.Interceptors(),
	}
}

// Get returns a SysUser entity by its id.
func (c *SysUserClient) Get(ctx context.Context, id uint64) (*SysUser, error) {
	return c.Query().Where(sysuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysUserClient) GetX(ctx context.Context, id uint64) *SysUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsersPost queries the users_post edge of a SysUser.
func (c *SysUserClient) QueryUsersPost(su *SysUser) *SysPostQuery {
	query := (&SysPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysuser.Table, sysuser.FieldID, id),
			sqlgraph.To(syspost.Table, syspost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, sysuser.UsersPostTable, sysuser.UsersPostPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySysUserPost queries the sys_user_post edge of a SysUser.
func (c *SysUserClient) QuerySysUserPost(su *SysUser) *SysUserPostQuery {
	query := (&SysUserPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysuser.Table, sysuser.FieldID, id),
			sqlgraph.To(sysuserpost.Table, sysuserpost.UserColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, sysuser.SysUserPostTable, sysuser.SysUserPostColumn),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SysUserClient) Hooks() []Hook {
	return c.hooks.SysUser
}

// Interceptors returns the client interceptors.
func (c *SysUserClient) Interceptors() []Interceptor {
	return c.inters.SysUser
}

func (c *SysUserClient) mutate(ctx context.Context, m *SysUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SysUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SysUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SysUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SysUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SysUser mutation op: %q", m.Op())
	}
}

// SysUserPostClient is a client for the SysUserPost schema.
type SysUserPostClient struct {
	config
}

// NewSysUserPostClient returns a client for the SysUserPost from the given config.
func NewSysUserPostClient(c config) *SysUserPostClient {
	return &SysUserPostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysuserpost.Hooks(f(g(h())))`.
func (c *SysUserPostClient) Use(hooks ...Hook) {
	c.hooks.SysUserPost = append(c.hooks.SysUserPost, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sysuserpost.Intercept(f(g(h())))`.
func (c *SysUserPostClient) Intercept(interceptors ...Interceptor) {
	c.inters.SysUserPost = append(c.inters.SysUserPost, interceptors...)
}

// Create returns a builder for creating a SysUserPost entity.
func (c *SysUserPostClient) Create() *SysUserPostCreate {
	mutation := newSysUserPostMutation(c.config, OpCreate)
	return &SysUserPostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysUserPost entities.
func (c *SysUserPostClient) CreateBulk(builders ...*SysUserPostCreate) *SysUserPostCreateBulk {
	return &SysUserPostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysUserPost.
func (c *SysUserPostClient) Update() *SysUserPostUpdate {
	mutation := newSysUserPostMutation(c.config, OpUpdate)
	return &SysUserPostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysUserPostClient) UpdateOne(sup *SysUserPost) *SysUserPostUpdateOne {
	mutation := newSysUserPostMutation(c.config, OpUpdateOne)
	mutation.user = &sup.SysUserID
	mutation.post = &sup.SysPostID
	return &SysUserPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysUserPost.
func (c *SysUserPostClient) Delete() *SysUserPostDelete {
	mutation := newSysUserPostMutation(c.config, OpDelete)
	return &SysUserPostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for SysUserPost.
func (c *SysUserPostClient) Query() *SysUserPostQuery {
	return &SysUserPostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSysUserPost},
		inters: c.Interceptors(),
	}
}

// QueryUser queries the user edge of a SysUserPost.
func (c *SysUserPostClient) QueryUser(sup *SysUserPost) *SysUserQuery {
	return c.Query().
		Where(sysuserpost.SysUserID(sup.SysUserID), sysuserpost.SysPostID(sup.SysPostID)).
		QueryUser()
}

// QueryPost queries the post edge of a SysUserPost.
func (c *SysUserPostClient) QueryPost(sup *SysUserPost) *SysPostQuery {
	return c.Query().
		Where(sysuserpost.SysUserID(sup.SysUserID), sysuserpost.SysPostID(sup.SysPostID)).
		QueryPost()
}

// Hooks returns the client hooks.
func (c *SysUserPostClient) Hooks() []Hook {
	return c.hooks.SysUserPost
}

// Interceptors returns the client interceptors.
func (c *SysUserPostClient) Interceptors() []Interceptor {
	return c.inters.SysUserPost
}

func (c *SysUserPostClient) mutate(ctx context.Context, m *SysUserPostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SysUserPostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SysUserPostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SysUserPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SysUserPostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SysUserPost mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		SysPost, SysUser, SysUserPost []ent.Hook
	}
	inters struct {
		SysPost, SysUser, SysUserPost []ent.Interceptor
	}
)
