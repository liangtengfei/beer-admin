// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/liangtengfei/beer-admin/internal/data/ent/predicate"
	"github.com/liangtengfei/beer-admin/internal/data/ent/syspost"
	"github.com/liangtengfei/beer-admin/internal/data/ent/sysuser"
)

// SysPostUpdate is the builder for updating SysPost entities.
type SysPostUpdate struct {
	config
	hooks    []Hook
	mutation *SysPostMutation
}

// Where appends a list predicates to the SysPostUpdate builder.
func (spu *SysPostUpdate) Where(ps ...predicate.SysPost) *SysPostUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetUpdatedAt sets the "updated_at" field.
func (spu *SysPostUpdate) SetUpdatedAt(t time.Time) *SysPostUpdate {
	spu.mutation.SetUpdatedAt(t)
	return spu
}

// SetDeletedAt sets the "deleted_at" field.
func (spu *SysPostUpdate) SetDeletedAt(t time.Time) *SysPostUpdate {
	spu.mutation.SetDeletedAt(t)
	return spu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spu *SysPostUpdate) SetNillableDeletedAt(t *time.Time) *SysPostUpdate {
	if t != nil {
		spu.SetDeletedAt(*t)
	}
	return spu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (spu *SysPostUpdate) ClearDeletedAt() *SysPostUpdate {
	spu.mutation.ClearDeletedAt()
	return spu
}

// SetCreatedBy sets the "created_by" field.
func (spu *SysPostUpdate) SetCreatedBy(s string) *SysPostUpdate {
	spu.mutation.SetCreatedBy(s)
	return spu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (spu *SysPostUpdate) SetNillableCreatedBy(s *string) *SysPostUpdate {
	if s != nil {
		spu.SetCreatedBy(*s)
	}
	return spu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (spu *SysPostUpdate) ClearCreatedBy() *SysPostUpdate {
	spu.mutation.ClearCreatedBy()
	return spu
}

// SetUpdatedBy sets the "updated_by" field.
func (spu *SysPostUpdate) SetUpdatedBy(s string) *SysPostUpdate {
	spu.mutation.SetUpdatedBy(s)
	return spu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (spu *SysPostUpdate) SetNillableUpdatedBy(s *string) *SysPostUpdate {
	if s != nil {
		spu.SetUpdatedBy(*s)
	}
	return spu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (spu *SysPostUpdate) ClearUpdatedBy() *SysPostUpdate {
	spu.mutation.ClearUpdatedBy()
	return spu
}

// SetPostName sets the "post_name" field.
func (spu *SysPostUpdate) SetPostName(s string) *SysPostUpdate {
	spu.mutation.SetPostName(s)
	return spu
}

// SetStatus sets the "status" field.
func (spu *SysPostUpdate) SetStatus(s syspost.Status) *SysPostUpdate {
	spu.mutation.SetStatus(s)
	return spu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (spu *SysPostUpdate) SetNillableStatus(s *syspost.Status) *SysPostUpdate {
	if s != nil {
		spu.SetStatus(*s)
	}
	return spu
}

// SetRemark sets the "remark" field.
func (spu *SysPostUpdate) SetRemark(s string) *SysPostUpdate {
	spu.mutation.SetRemark(s)
	return spu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (spu *SysPostUpdate) SetNillableRemark(s *string) *SysPostUpdate {
	if s != nil {
		spu.SetRemark(*s)
	}
	return spu
}

// ClearRemark clears the value of the "remark" field.
func (spu *SysPostUpdate) ClearRemark() *SysPostUpdate {
	spu.mutation.ClearRemark()
	return spu
}

// AddPostsUserIDs adds the "posts_user" edge to the SysUser entity by IDs.
func (spu *SysPostUpdate) AddPostsUserIDs(ids ...uint64) *SysPostUpdate {
	spu.mutation.AddPostsUserIDs(ids...)
	return spu
}

// AddPostsUser adds the "posts_user" edges to the SysUser entity.
func (spu *SysPostUpdate) AddPostsUser(s ...*SysUser) *SysPostUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spu.AddPostsUserIDs(ids...)
}

// Mutation returns the SysPostMutation object of the builder.
func (spu *SysPostUpdate) Mutation() *SysPostMutation {
	return spu.mutation
}

// ClearPostsUser clears all "posts_user" edges to the SysUser entity.
func (spu *SysPostUpdate) ClearPostsUser() *SysPostUpdate {
	spu.mutation.ClearPostsUser()
	return spu
}

// RemovePostsUserIDs removes the "posts_user" edge to SysUser entities by IDs.
func (spu *SysPostUpdate) RemovePostsUserIDs(ids ...uint64) *SysPostUpdate {
	spu.mutation.RemovePostsUserIDs(ids...)
	return spu
}

// RemovePostsUser removes "posts_user" edges to SysUser entities.
func (spu *SysPostUpdate) RemovePostsUser(s ...*SysUser) *SysPostUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spu.RemovePostsUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *SysPostUpdate) Save(ctx context.Context) (int, error) {
	spu.defaults()
	return withHooks[int, SysPostMutation](ctx, spu.sqlSave, spu.mutation, spu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spu *SysPostUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *SysPostUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *SysPostUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spu *SysPostUpdate) defaults() {
	if _, ok := spu.mutation.UpdatedAt(); !ok {
		v := syspost.UpdateDefaultUpdatedAt()
		spu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spu *SysPostUpdate) check() error {
	if v, ok := spu.mutation.PostName(); ok {
		if err := syspost.PostNameValidator(v); err != nil {
			return &ValidationError{Name: "post_name", err: fmt.Errorf(`ent: validator failed for field "SysPost.post_name": %w`, err)}
		}
	}
	if v, ok := spu.mutation.Status(); ok {
		if err := syspost.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SysPost.status": %w`, err)}
		}
	}
	return nil
}

func (spu *SysPostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := spu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(syspost.Table, syspost.Columns, sqlgraph.NewFieldSpec(syspost.FieldID, field.TypeUint64))
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.UpdatedAt(); ok {
		_spec.SetField(syspost.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := spu.mutation.DeletedAt(); ok {
		_spec.SetField(syspost.FieldDeletedAt, field.TypeTime, value)
	}
	if spu.mutation.DeletedAtCleared() {
		_spec.ClearField(syspost.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := spu.mutation.CreatedBy(); ok {
		_spec.SetField(syspost.FieldCreatedBy, field.TypeString, value)
	}
	if spu.mutation.CreatedByCleared() {
		_spec.ClearField(syspost.FieldCreatedBy, field.TypeString)
	}
	if value, ok := spu.mutation.UpdatedBy(); ok {
		_spec.SetField(syspost.FieldUpdatedBy, field.TypeString, value)
	}
	if spu.mutation.UpdatedByCleared() {
		_spec.ClearField(syspost.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := spu.mutation.PostName(); ok {
		_spec.SetField(syspost.FieldPostName, field.TypeString, value)
	}
	if value, ok := spu.mutation.Status(); ok {
		_spec.SetField(syspost.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := spu.mutation.Remark(); ok {
		_spec.SetField(syspost.FieldRemark, field.TypeString, value)
	}
	if spu.mutation.RemarkCleared() {
		_spec.ClearField(syspost.FieldRemark, field.TypeString)
	}
	if spu.mutation.PostsUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   syspost.PostsUserTable,
			Columns: syspost.PostsUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeUint64),
			},
		}
		createE := &SysUserPostCreate{config: spu.config, mutation: newSysUserPostMutation(spu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.RemovedPostsUserIDs(); len(nodes) > 0 && !spu.mutation.PostsUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   syspost.PostsUserTable,
			Columns: syspost.PostsUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SysUserPostCreate{config: spu.config, mutation: newSysUserPostMutation(spu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.PostsUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   syspost.PostsUserTable,
			Columns: syspost.PostsUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SysUserPostCreate{config: spu.config, mutation: newSysUserPostMutation(spu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{syspost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	spu.mutation.done = true
	return n, nil
}

// SysPostUpdateOne is the builder for updating a single SysPost entity.
type SysPostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysPostMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (spuo *SysPostUpdateOne) SetUpdatedAt(t time.Time) *SysPostUpdateOne {
	spuo.mutation.SetUpdatedAt(t)
	return spuo
}

// SetDeletedAt sets the "deleted_at" field.
func (spuo *SysPostUpdateOne) SetDeletedAt(t time.Time) *SysPostUpdateOne {
	spuo.mutation.SetDeletedAt(t)
	return spuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spuo *SysPostUpdateOne) SetNillableDeletedAt(t *time.Time) *SysPostUpdateOne {
	if t != nil {
		spuo.SetDeletedAt(*t)
	}
	return spuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (spuo *SysPostUpdateOne) ClearDeletedAt() *SysPostUpdateOne {
	spuo.mutation.ClearDeletedAt()
	return spuo
}

// SetCreatedBy sets the "created_by" field.
func (spuo *SysPostUpdateOne) SetCreatedBy(s string) *SysPostUpdateOne {
	spuo.mutation.SetCreatedBy(s)
	return spuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (spuo *SysPostUpdateOne) SetNillableCreatedBy(s *string) *SysPostUpdateOne {
	if s != nil {
		spuo.SetCreatedBy(*s)
	}
	return spuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (spuo *SysPostUpdateOne) ClearCreatedBy() *SysPostUpdateOne {
	spuo.mutation.ClearCreatedBy()
	return spuo
}

// SetUpdatedBy sets the "updated_by" field.
func (spuo *SysPostUpdateOne) SetUpdatedBy(s string) *SysPostUpdateOne {
	spuo.mutation.SetUpdatedBy(s)
	return spuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (spuo *SysPostUpdateOne) SetNillableUpdatedBy(s *string) *SysPostUpdateOne {
	if s != nil {
		spuo.SetUpdatedBy(*s)
	}
	return spuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (spuo *SysPostUpdateOne) ClearUpdatedBy() *SysPostUpdateOne {
	spuo.mutation.ClearUpdatedBy()
	return spuo
}

// SetPostName sets the "post_name" field.
func (spuo *SysPostUpdateOne) SetPostName(s string) *SysPostUpdateOne {
	spuo.mutation.SetPostName(s)
	return spuo
}

// SetStatus sets the "status" field.
func (spuo *SysPostUpdateOne) SetStatus(s syspost.Status) *SysPostUpdateOne {
	spuo.mutation.SetStatus(s)
	return spuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (spuo *SysPostUpdateOne) SetNillableStatus(s *syspost.Status) *SysPostUpdateOne {
	if s != nil {
		spuo.SetStatus(*s)
	}
	return spuo
}

// SetRemark sets the "remark" field.
func (spuo *SysPostUpdateOne) SetRemark(s string) *SysPostUpdateOne {
	spuo.mutation.SetRemark(s)
	return spuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (spuo *SysPostUpdateOne) SetNillableRemark(s *string) *SysPostUpdateOne {
	if s != nil {
		spuo.SetRemark(*s)
	}
	return spuo
}

// ClearRemark clears the value of the "remark" field.
func (spuo *SysPostUpdateOne) ClearRemark() *SysPostUpdateOne {
	spuo.mutation.ClearRemark()
	return spuo
}

// AddPostsUserIDs adds the "posts_user" edge to the SysUser entity by IDs.
func (spuo *SysPostUpdateOne) AddPostsUserIDs(ids ...uint64) *SysPostUpdateOne {
	spuo.mutation.AddPostsUserIDs(ids...)
	return spuo
}

// AddPostsUser adds the "posts_user" edges to the SysUser entity.
func (spuo *SysPostUpdateOne) AddPostsUser(s ...*SysUser) *SysPostUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spuo.AddPostsUserIDs(ids...)
}

// Mutation returns the SysPostMutation object of the builder.
func (spuo *SysPostUpdateOne) Mutation() *SysPostMutation {
	return spuo.mutation
}

// ClearPostsUser clears all "posts_user" edges to the SysUser entity.
func (spuo *SysPostUpdateOne) ClearPostsUser() *SysPostUpdateOne {
	spuo.mutation.ClearPostsUser()
	return spuo
}

// RemovePostsUserIDs removes the "posts_user" edge to SysUser entities by IDs.
func (spuo *SysPostUpdateOne) RemovePostsUserIDs(ids ...uint64) *SysPostUpdateOne {
	spuo.mutation.RemovePostsUserIDs(ids...)
	return spuo
}

// RemovePostsUser removes "posts_user" edges to SysUser entities.
func (spuo *SysPostUpdateOne) RemovePostsUser(s ...*SysUser) *SysPostUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spuo.RemovePostsUserIDs(ids...)
}

// Where appends a list predicates to the SysPostUpdate builder.
func (spuo *SysPostUpdateOne) Where(ps ...predicate.SysPost) *SysPostUpdateOne {
	spuo.mutation.Where(ps...)
	return spuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *SysPostUpdateOne) Select(field string, fields ...string) *SysPostUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated SysPost entity.
func (spuo *SysPostUpdateOne) Save(ctx context.Context) (*SysPost, error) {
	spuo.defaults()
	return withHooks[*SysPost, SysPostMutation](ctx, spuo.sqlSave, spuo.mutation, spuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *SysPostUpdateOne) SaveX(ctx context.Context) *SysPost {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *SysPostUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *SysPostUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spuo *SysPostUpdateOne) defaults() {
	if _, ok := spuo.mutation.UpdatedAt(); !ok {
		v := syspost.UpdateDefaultUpdatedAt()
		spuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spuo *SysPostUpdateOne) check() error {
	if v, ok := spuo.mutation.PostName(); ok {
		if err := syspost.PostNameValidator(v); err != nil {
			return &ValidationError{Name: "post_name", err: fmt.Errorf(`ent: validator failed for field "SysPost.post_name": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.Status(); ok {
		if err := syspost.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SysPost.status": %w`, err)}
		}
	}
	return nil
}

func (spuo *SysPostUpdateOne) sqlSave(ctx context.Context) (_node *SysPost, err error) {
	if err := spuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(syspost.Table, syspost.Columns, sqlgraph.NewFieldSpec(syspost.FieldID, field.TypeUint64))
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SysPost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, syspost.FieldID)
		for _, f := range fields {
			if !syspost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != syspost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.UpdatedAt(); ok {
		_spec.SetField(syspost.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := spuo.mutation.DeletedAt(); ok {
		_spec.SetField(syspost.FieldDeletedAt, field.TypeTime, value)
	}
	if spuo.mutation.DeletedAtCleared() {
		_spec.ClearField(syspost.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := spuo.mutation.CreatedBy(); ok {
		_spec.SetField(syspost.FieldCreatedBy, field.TypeString, value)
	}
	if spuo.mutation.CreatedByCleared() {
		_spec.ClearField(syspost.FieldCreatedBy, field.TypeString)
	}
	if value, ok := spuo.mutation.UpdatedBy(); ok {
		_spec.SetField(syspost.FieldUpdatedBy, field.TypeString, value)
	}
	if spuo.mutation.UpdatedByCleared() {
		_spec.ClearField(syspost.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := spuo.mutation.PostName(); ok {
		_spec.SetField(syspost.FieldPostName, field.TypeString, value)
	}
	if value, ok := spuo.mutation.Status(); ok {
		_spec.SetField(syspost.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := spuo.mutation.Remark(); ok {
		_spec.SetField(syspost.FieldRemark, field.TypeString, value)
	}
	if spuo.mutation.RemarkCleared() {
		_spec.ClearField(syspost.FieldRemark, field.TypeString)
	}
	if spuo.mutation.PostsUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   syspost.PostsUserTable,
			Columns: syspost.PostsUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeUint64),
			},
		}
		createE := &SysUserPostCreate{config: spuo.config, mutation: newSysUserPostMutation(spuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.RemovedPostsUserIDs(); len(nodes) > 0 && !spuo.mutation.PostsUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   syspost.PostsUserTable,
			Columns: syspost.PostsUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SysUserPostCreate{config: spuo.config, mutation: newSysUserPostMutation(spuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.PostsUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   syspost.PostsUserTable,
			Columns: syspost.PostsUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SysUserPostCreate{config: spuo.config, mutation: newSysUserPostMutation(spuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SysPost{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{syspost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	spuo.mutation.done = true
	return _node, nil
}
